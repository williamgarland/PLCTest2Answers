program = while_statement | if_statement | expression | assignment_statement;
while_statement = WHILE LPAREN expression RPAREN content;
if_statement = IF LPAREN expression RPAREN content (ELSE IF LPAREN expression RPAREN content)* (ELSE content)?;
assignment_statement = ID ASSIGN expression SEMICOLON;
expression = logical_or_expression;
logical_or_expression = logical_and_expression (LOGICAL_OR logical_and_expression)*;
logical_and_expression = additive_expression (LOGICAL_AND additive_expression)*;
additive_expression = multiplicative_expression ((PLUS | MINUS) multiplicative_expression)*;
multiplicative_expression = prefix_expression ((ASTERISK | SLASH | PERCENT) prefix_expression)*;
prefix_expression = LOGICAL_NOT* primary;
primary = ID (LPAREN RPAREN)? | STRING_LITERAL | INTEGER_LITERAL | FLOATING_POINT_LITERAL | (LPAREN expression RPAREN);
content = assignment_statement | while_statement | if_statement | block;
block = LBRACE content* RBRACE;

VVV EBNF VVV

while_statement = WHILE, LPAREN, expression, RPAREN, content;
if_statement = IF, LPAREN, expression, RPAREN, content, {ELSE, IF, LPAREN, expression, RPAREN, content}, [ELSE, content];
assignment_statement = ID, ASSIGN, expression, SEMICOLON;
expression = logical_or_expression;
logical_or_expression = logical_and_expression, {LOGICAL_OR, logical_and_expression};
logical_and_expression = additive_expression, {LOGICAL_AND, additive_expression};
additive_expression = multiplicative_expression, {(PLUS | MINUS), multiplicative_expression};
multiplicative_expression = prefix_expression, {(ASTERISK | SLASH | PERCENT), prefix_expression};
prefix_expression = {LOGICAL_NOT}, primary;
primary = (ID, [LPAREN, RPAREN]) | STRING_LITERAL | INTEGER_LITERAL | FLOATING_POINT_LITERAL | (LPAREN, expression, RPAREN);
content = assignment_statement | while_statement | if_statement | block;
block = LBRACE, {content}, RBRACE;
WHILE = "while";
IF = "if";
ELSE = "else";
LPAREN = "(";
RPAREN = ")";
LBRACE = "{";
RBRACE = "}";
SEMICOLON = ";";
ID = ? A Perl-style identifier ?;
STRING_LITERAL = ? A C-style string literal ?;
INTEGER_LITERAL = ? A C-style integer, hexadecimal, octal, or binary literal ?;
FLOATING_POINT_LITERAL = ? A C-style floating-point or hexadecimal floating-point literal ?;
LOGICAL_OR = "||";
LOGICAL_AND = "&&";
PLUS = "+";
MINUS = "-";
ASTERISK = "*";
SLASH = "/";
PERCENT = "%";
LOGICAL_NOT = "!";